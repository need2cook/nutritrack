"""init

Revision ID: bd17fb05d6ce
Revises: 
Create Date: 2025-09-21 23:58:42.447161

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bd17fb05d6ce'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('exersices',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('kcal_30m', sa.Integer(), nullable=False),
    sa.CheckConstraint('kcal_30m >= 0', name='chk_kcal_non_negative'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('carbs_100g', sa.Numeric(precision=6, scale=2), nullable=False),
    sa.Column('proteins_100g', sa.Numeric(precision=6, scale=2), nullable=False),
    sa.Column('fats_100g', sa.Numeric(precision=6, scale=2), nullable=False),
    sa.Column('kcal_100g', sa.Integer(), nullable=False),
    sa.CheckConstraint('carbs_100g >= 0 AND proteins_100g >= 0 AND fats_100g >= 0', name='chk_macros_non_negative'),
    sa.CheckConstraint('kcal_100g >= 0', name='chk_kcal_non_negative'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=True),
    sa.Column('first_name', sa.String(length=64), nullable=False),
    sa.Column('current_weight', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('telegram_id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('diaries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('days',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('diary_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.CheckConstraint('user_id = diary_id', name='chk_day_user_equals_diary'),
    sa.ForeignKeyConstraint(['diary_id'], ['diaries.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('diary_id', 'date', name='uq_day_diary_date')
    )
    op.create_index('ix_days_diary_date', 'days', ['diary_id', 'date'], unique=False)
    op.create_index(op.f('ix_days_diary_id'), 'days', ['diary_id'], unique=False)
    op.create_index('ix_days_user_date', 'days', ['user_id', 'date'], unique=False)
    op.create_index(op.f('ix_days_user_id'), 'days', ['user_id'], unique=False)
    op.create_table('exersice_entities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('minutes', sa.Integer(), nullable=False),
    sa.Column('day_id', sa.Integer(), nullable=False),
    sa.Column('exersice_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('minutes > 0', name='chk_minutes_positive'),
    sa.ForeignKeyConstraint(['day_id'], ['days.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['exersice_id'], ['exersices.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('day_id', 'exersice_id', name='uq_day_exersice')
    )
    op.create_index(op.f('ix_exersice_entities_day_id'), 'exersice_entities', ['day_id'], unique=False)
    op.create_index(op.f('ix_exersice_entities_exersice_id'), 'exersice_entities', ['exersice_id'], unique=False)
    op.create_table('product_entities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('grams', sa.Integer(), nullable=False),
    sa.Column('day_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('grams > 0', name='chk_grams_positive'),
    sa.ForeignKeyConstraint(['day_id'], ['days.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('day_id', 'product_id', name='uq_day_product')
    )
    op.create_index(op.f('ix_product_entities_day_id'), 'product_entities', ['day_id'], unique=False)
    op.create_index(op.f('ix_product_entities_product_id'), 'product_entities', ['product_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_product_entities_product_id'), table_name='product_entities')
    op.drop_index(op.f('ix_product_entities_day_id'), table_name='product_entities')
    op.drop_table('product_entities')
    op.drop_index(op.f('ix_exersice_entities_exersice_id'), table_name='exersice_entities')
    op.drop_index(op.f('ix_exersice_entities_day_id'), table_name='exersice_entities')
    op.drop_table('exersice_entities')
    op.drop_index(op.f('ix_days_user_id'), table_name='days')
    op.drop_index('ix_days_user_date', table_name='days')
    op.drop_index(op.f('ix_days_diary_id'), table_name='days')
    op.drop_index('ix_days_diary_date', table_name='days')
    op.drop_table('days')
    op.drop_table('diaries')
    op.drop_table('users')
    op.drop_table('products')
    op.drop_table('exersices')
    # ### end Alembic commands ###
